require('dotenv').config();
const createServer = require('./src/server');
const whatsappClient = require('./src/whatsapp/client');

// Ã‡evre deÄŸiÅŸkenlerini kontrol et
const requiredEnvVars = ['PORT', 'API_KEY'];
const missingEnvVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingEnvVars.length > 0) {
  console.error('âœ— HATA: Gerekli Ã§evre deÄŸiÅŸkenleri eksik:', missingEnvVars.join(', '));
  console.error('LÃ¼tfen .env dosyasÄ±nÄ± oluÅŸturun ve gerekli deÄŸiÅŸkenleri tanÄ±mlayÄ±n.');
  console.error('Ã–rnek iÃ§in env.example dosyasÄ±na bakÄ±n.');
  process.exit(1);
}

// Port ayarÄ±
const PORT = process.env.PORT || 3000;

// Express sunucusunu oluÅŸtur
const app = createServer();

// Sunucuyu baÅŸlat
const server = app.listen(PORT, () => {
  console.log('\n========================================');
  console.log('ðŸš€ WhatsApp API Servisi BaÅŸlatÄ±ldÄ±');
  console.log('========================================');
  console.log(`ðŸ“¡ Sunucu Ã§alÄ±ÅŸÄ±yor: http://localhost:${PORT}`);
  console.log(`ðŸ”‘ API Key: ${process.env.API_KEY.substring(0, 4)}***`);
  console.log('========================================\n');

  // WhatsApp istemcisini baÅŸlat
  console.log('WhatsApp istemcisi baÅŸlatÄ±lÄ±yor...\n');
  whatsappClient.initialize();
});

// Graceful shutdown
const shutdown = async () => {
  console.log('\n\nSunucu kapatÄ±lÄ±yor...');
  
  // HTTP sunucusunu kapat
  server.close(() => {
    console.log('âœ“ HTTP sunucusu kapatÄ±ldÄ±');
  });

  // WhatsApp istemcisini kapat
  try {
    await whatsappClient.destroy();
    console.log('âœ“ WhatsApp istemcisi kapatÄ±ldÄ±');
  } catch (error) {
    console.error('WhatsApp istemcisi kapatÄ±lÄ±rken hata:', error.message);
  }

  console.log('Uygulama sonlandÄ±rÄ±ldÄ±.');
  process.exit(0);
};

// Signal handler'larÄ±
process.on('SIGTERM', shutdown);
process.on('SIGINT', shutdown);

// Hata handler'larÄ±
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  shutdown();
});

